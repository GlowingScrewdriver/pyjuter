"""
Various shims for use in notebooks generated by Pyjuter.

Variable names in the shims are prefixed with `_pyjuter_`
to prevent conflicts with names used in the code being handle.
"""

from zlib import adler32
from typing import Dict

module_setup_shim = """
# Not sure why this should be hidden ...
import sys as _pyjuter_sys
# ... nevertheless, consistency

class _pyjuter_ModuleShim:
    @classmethod
    def get (cls, name):
        if name not in _pyjuter_sys.modules:
            _pyjuter_sys.modules [name] = cls ()
        return _pyjuter_sys.modules [name]

    def populate (self, old_global_names, new_globals):
        for name in new_globals:
            if (
                (not name.startswith ("_pyjuter_")) and
                name not in old_global_names
            ):
                self.__setattr__ (name, new_globals [name])
"""

importable_pre = (
    # Goes at the top of the cell
    "_pyjuter_module = _pyjuter_ModuleShim.get ('{module_name}')\n"
    "_pyjuter_old_global_names = set (globals ().keys ())\n\n"
)

importable_post = (
    # Goes at the bottom of the cell
    "\n_pyjuter_new_globals = globals ()\n"
    "_pyjuter_module.populate (_pyjuter_old_global_names, _pyjuter_new_globals)\n"
)

def digest (shim: str) -> Dict[str, int]:
    """
    Generate the digest for shim `str`.
    Returns a dictionary of the form:
    `{"len": int, "sum": int}`
    """
    b_shim = bytes (shim, encoding = "ascii")
    return {
        "len": len (b_shim),
        "sum": adler32 (b_shim),
    }
